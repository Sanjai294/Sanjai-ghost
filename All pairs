ALL PAIRS SHORTEST PATH 

#include <iostream>
#include <vector>
using namespace std;

const int INF = 9999; // Representing no edge with a large number

class Path {
public:
    void get(); // To get the cost of edges
    void allpair(); // To find the shortest path
    void display(); // To display the output matrix

private:
    int n;
    vector<vector<int>> cost;
    vector<vector<int>> a;
};

// Gets the cost of each edge
void Path::get() {
    cout << "\n\t\tALL PAIRS SHORTEST PATH ALGORITHM";
    cout << "\n\nEnter the total number of vertices: ";
    cin >> n;

    cost.resize(n, vector<int>(n, INF));
    a.resize(n, vector<int>(n, INF));

    cout << "\nEnter the cost:";
    cout << "\n\nIf there is no edge enter 9999\n";
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i == j) {
                cost[i][j] = 0;
                a[i][j] = 0;
            } else {
                cout << "\nEnter the cost between " << i + 1 << " and " << j + 1 << " : ";
                cin >> cost[i][j];
                a[i][j] = cost[i][j];
            }
        }
    }
}

// Finds the shortest path
void Path::allpair() {
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (a[i][k] + a[k][j] < a[i][j]) {
                    a[i][j] = a[i][k] + a[k][j];
                }
            }
        }
    }
}

// Displays the output matrix
void Path::display() {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (a[i][j] == INF) {
                cout << "INF\t";
            } else {
                cout << a[i][j] << "\t";
            }
        }
        cout << "\n\n";
    }
}

int main() {
    Path p;
    p.get();
    cout << "\n\nADJACENCY MATRIX\n\n";
    p.display();
    p.allpair();
    cout << "\nALL PAIRS SHORTEST PATH\n\n";
    p.display();
    return 0;
}
