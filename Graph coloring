#include <iostream>
using namespace std;

int k, m;

class graph {
    int n, x[20], g[20][20];
public:
    void get();
    void mcolor(int);
    void nextvalue(int);
};

void graph::get() {
    cout << "\nEnter the number of vertices of the graph: ";
    cin >> n;
    cout << "\nEnter the adjacency matrix:\n";
    cout << "Enter 0 if there is no edge\n";
    for (int i = 1; i <= n - 1; i++) {
        for (int j = i + 1; j <= n; j++) {
            cout << i << " to " << j << " = ";
            cin >> g[i][j];
            g[j][i] = g[i][j];
        }
    }
    cout << "\nEnter the number of colors: ";
    cin >> m;
    for (int i = 1; i <= n; i++) {
        x[i] = 0;
    }
}

void graph::mcolor(int k) {
    do {
        nextvalue(k);
        if (x[k] == 0) { // New color not found
            return;
        }

        if (k == n) { // Color assigned to all nodes
            cout << "Solution: ";
            for (int i = 1; i <= n; i++) {
                cout << "\t" << x[i];
            }
            cout << "\n";
        } else {
            mcolor(k + 1);
        }
    } while (true);
}

// Find next color
void graph::nextvalue(int k) {
    do {
        x[k] = (x[k] + 1) % (m + 1); // Assign next color
        if (x[k] == 0) {
            return;
        }
        // Compare color with adjacent nodes
        int j;
        for (j = 1; j <= n; j++) {
            if (g[k][j] > 0 && x[k] == x[j]) {
                break;
            }
        }

        if (j == n + 1) {
            return;
        }
    } while (true);
}

int main() {
    graph gc;
    gc.get();
    gc.mcolor(1);
    return 0;
}
