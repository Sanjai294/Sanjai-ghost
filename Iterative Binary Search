ITERATIVE BINARY SEARCH

#include <iostream>
#include <cmath>

class Binary {
    int i, mid, low, high, n, x, a[20];
public:
    void get();
    int search(int [], int, int);
    void complex();
};

// GETS THE INPUT
void Binary::get() {
    std::cout << "\nEnter the number of elements: ";
    std::cin >> n;
    std::cout << "\nEnter the array elements:\n";
    for(i = 0; i < n; i++) {
        std::cin >> a[i];
    }
    std::cout << "\nEnter the search element: ";
    std::cin >> x;
}

// PERFORMS SEARCH
int Binary::search(int a[], int n, int xi) {
    low = 0;
    high = n - 1;
    while(low <= high) {
        mid = (low + high) / 2;
        if(xi < a[mid]) {
            high = mid - 1;
        } else if(xi > a[mid]) {
            low = mid + 1;
        } else {
            return mid;
        }
    }
    return -1;
}

// DISPLAYS THE TIME & SPACE COMPLEXITY
void Binary::complex() {
    std::cout << "\n\nTime Complexity is O(" << log(n) / log(2) << ")\n";
    std::cout << "Space Complexity is O(" << n << ")\n";
}

int main() {
    int m;
    Binary b;
    b.get();
    m = b.search(b.a, b.n, b.x);
    if(m == -1) {
        std::cout << "Element not found";
    } else {
        std::cout << "Element found at position " << m + 1;
    }
    b.complex();
    return 0;
}
