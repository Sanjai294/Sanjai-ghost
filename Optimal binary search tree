#include <iostream>
#include <climits> // for INT_MAX

using namespace std;

class binser {
public:
    int p[10], q[10], w[10][10], c[10][10], r[10][10], n;

    void get() {
        cout << "\nEnter the number of nodes: ";
        cin >> n;
        cout << "\nEnter the probability of internal nodes:\n";
        for (int i = 1; i <= n; i++) {
            cin >> p[i];
        }
        cout << "\nEnter the probability of external nodes:\n";
        for (int i = 0; i <= n; i++) {
            cin >> q[i];
        }
    }

    void compute() {
        for (int i = 0; i < n; i++) {
            w[i][i] = q[i];
            r[i][i] = 0;
            c[i][i] = 0;
            w[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
            r[i][i + 1] = i + 1;
            c[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
        }

        w[n][n] = q[n];
        r[n][n] = 0;
        c[n][n] = 0;

        for (int m = 2; m <= n; m++) {
            for (int i = 0; i <= n - m; i++) {
                int j = i + m;
                w[i][j] = w[i][j - 1] + p[j] + q[j];
                int k = find(i, j);
                c[i][j] = c[i][k - 1] + c[k][j] + w[i][j];
                r[i][j] = k;
            }
        }

        for (int l = 1; l <= n; l++) {
            cout << "\nOptimal Binary Search Tree with " << l << " node(s):\n";
            for (int i = 0; i <= n - l; i++) {
                int j = i + l;
                cout << "w[" << i << "][" << j << "] = " << w[i][j] << "\tc[" << i << "][" << j << "] = " << c[i][j] << "\tr[" << i << "][" << j << "] = " << r[i][j] << "\n";
            }
            cout << "------------------------------\n";
        }
    }

    int find(int c, int d) {
        int min = INT_MAX, l;
        int e = r[c][d - 1];
        int f = r[c + 1][d];
        for (int h = e; h <= f; h++) {
            if ((c[c][h - 1] + c[h][d]) < min) {
                min = c[c][h - 1] + c[h][d];
                l = h;
            }
        }
        return l;
    }
};

int main() {
    binser b;
    b.get();
    b.compute();
    return 0;
}
