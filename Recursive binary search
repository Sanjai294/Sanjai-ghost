RECURSIVE BINARY SEARCH

#include <iostream>
#include <cmath>
using namespace std;

class Binary {
public:
    int x, a[50], mid, n;
    void get();
    int search(int[], int, int, int);
    void complex();
};

void Binary::get() {
    cout << "\nBINARY SEARCH";
    cout << "\nEnter the size of array: ";
    cin >> n;
    cout << "\nEnter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    cout << "\nEnter the element to be searched: ";
    cin >> x;
}

int Binary::search(int a[], int low, int high, int xi) {
    if (low > high) {
        return -1;
    }
    mid = (low + high) / 2;
    if (xi == a[mid]) {
        return mid;
    } else if (xi < a[mid]) {
        return search(a, low, mid - 1, xi);
    } else {
        return search(a, mid + 1, high, xi);
    }
}

void Binary::complex() {
    cout << "\n\nTime Complexity is O(log(" << n << "))\n";
    cout << "Space Complexity is O(" << n << ")\n";
}

int main() {
    Binary bi;
    bi.get();
    int pos = bi.search(bi.a, 0, bi.n - 1, bi.x);
    if (pos == -1) {
        cout << "Element not found";
    } else {
        cout << "Element is found at position " << pos + 1;
    }
    bi.complex();
    return 0;
}
